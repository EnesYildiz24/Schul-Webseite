"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cmdZip = cmdZip;
const adm_zip_1 = __importDefault(require("adm-zip"));
const child_process_1 = require("child_process");
const fs = __importStar(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const REPO = ".git";
async function cmdZip(options) {
    const filename = generateFileName(options.filename);
    const minsize = parseInt(options.minsize);
    const maxsize = parseInt(options.maxsize);
    if (!await folderExists(REPO)) {
        program.error('Es wurde kein Git-Repository gefunden. Hast Du die Vorlage geklont?');
    }
    if (!options.noCommitCheck) {
        try {
            const out = await execShellExec("git status -su");
            if (out.length > 0) {
                program.error(`Du hast noch nicht alle Änderungen eingespielt:\n${out}\nSpiele diese Änderungen über\n  git add.\n  git commit -m "Nachricht"\nein.`);
            }
        }
        catch (err) {
            program.error(`Das Git - Kommandozeilentool "git" konnte nicht ausgeführt werden: \n${err} \nBitte installiere gegebenenfalls das Tool für Dein Betriebssystem.`);
        }
    }
    if (await fileExists(filename)) {
        if (options.noOverwrite) {
            program.error(`Die Datei ${filename} existiert bereits. Bitte lösche diese manuell um eine neue zu erstellen.`);
        }
        try {
            await fs.rm(filename);
            log(`Alte Version der Datei ${filename} wird überschrieben.`);
        }
        catch (err) {
            program.error(`Die Datei existierende Datei ${filename} konnte nicht gelöscht(bzw.überschrieben) werden, bitte manuell überprüfen.`);
        }
    }
    try {
        const zip = new adm_zip_1.default();
        zip.addLocalFolder(REPO, REPO);
        await new Promise((resolve, reject) => {
            zip.writeZip(filename, (err) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
        // await nodeZip({ source: REPO, destination: filename });
        try {
            const stats = await fs.stat(filename);
            const size = Math.round(stats.size / 1000);
            log(`Die Abgabedatei "${filename}"(${size} KB) wurde erfolgreich erstellt.`);
            if (size > maxsize) {
                log(`Achtung: Die Abgabedatei "${filename}" erscheint ungewöhnlich groß.\nFalls Du die Datei aufgrund der Größe nicht bei Moodle abgeben kannst, \nwende Dich per E - Mail an den Betreuer.\nSchicke aber auf keinen Fall die Datei per E - Mail!`);
            }
            else {
                console.log(`Gebe diese Datei über Moodle ab.`);
                if (size < minsize) {
                    console.log(`Achtung: Die Abgabedatei "${filename}" erscheint ungewöhnlich klein.`);
                }
            }
        }
        catch (err) {
            program.error(`Die Abgabedatei "${filename}" konnte nicht erstellt werden: ${err}.`);
        }
    }
    catch (err) {
        program.error(`Die Abgabedatei "${filename}" konnte nicht erstellt werden: \n${err} `);
    }
}
async function folderExists(name) {
    if (!name) {
        throw Error("Cannot check folder existence, no name provided.");
    }
    try {
        const stat = await fs.stat(name);
        return stat.isDirectory();
    }
    catch (err) {
        return false;
    }
}
async function fileExists(name) {
    if (!name) {
        throw Error("Cannot check file existence, no name provided.");
    }
    try {
        const stat = await fs.stat(name);
        return true;
    }
    catch (err) {
        return false;
    }
}
function log(msg) {
    console.log(msg);
}
async function execShellExec(cmd) {
    return new Promise((resolve, reject) => {
        (0, child_process_1.exec)(cmd, (error, stdout, stderr) => {
            if (error) {
                reject(error);
            }
            resolve(stdout ? stdout : stderr);
        });
    });
}
function generateFileName(template) {
    let file = template;
    let cwd = path_1.default.basename(process.cwd());
    let regexp = new RegExp("\\$\\{CWD\\}", 'g');
    file = file.replace(regexp, cwd);
    if (file.indexOf('.') < 0) {
        file += ".zip";
    }
    return file;
}
//# sourceMappingURL=cmdZip.js.map